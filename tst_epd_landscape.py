from machine import Pin, SPI
from time import sleep

spi = SPI(1, baudrate=4000000)  # 8000000 also works
spi.init()

import epaper2in13b
cs = Pin(15,Pin.OUT)
dc = Pin(4,Pin.OUT)
rst = Pin(5,Pin.OUT)
busy = Pin(16,Pin.IN)

epd = epaper2in13b.EPD(spi, cs, dc, rst, busy)
epd.init()

epd.clear_frame()

# landscape mode test ##############################################################################

h = 152;  w = 296 # e-paper heigth and width. It will be used in landscape mode

buf_black        = bytearray(w * h // 8) # used by frame buffer (landscape)
buf_epaper_black = bytearray(w * h // 8) # used to display on e-paper after bytes have been

import framebuf
fb_black = framebuf.FrameBuffer(buf_black, w, h, framebuf.MONO_VLSB) #landscape
fb_final_black = framebuf.FrameBuffer(buf_epaper_black, h, w, framebuf.MONO_HLSB) #portrait

black = 0 # will be black on buf_black, red on buf_red
white = 1

#clear red & black screens, then write 
fb_black.fill(white)
fb_black.text('Hello world!', 5, 10, black)

# original code from JumpZero @ https://forum.micropython.org/viewtopic.php?f=18&t=6319#p36047
# Move frame buffer bytes to e-paper buffer to match e-paper bytes oranisation.
# That is landscape mode to portrait mode. (for red and black buffers) 
x=0; y=0; n=1; R=0
# for 152x296
# 152/8 = 19
for i in range(1, 20):
    for j in range(1, 297):
        R = (n-x)+((n-y)*18)
        buf_epaper_black[R-1] = buf_black[n-1]
        n +=1
    x = n+i-1
    y = n-1

epd.send_frame(buf_epaper_black, None)
epd.display_frame()


# send the original buffer directly
epd.send_frame_landscape(buf_black, None)
epd.display_frame()


# txt + img ##############################################################################

# Load the array image into the framebuffer (the image is 32x32)
pic = bytearray(b'\x00\x00\x00\x01\xff\xf0\x00\x00\x00\x00\x00\x7f\xc0?\xc0\x00\x00\x00\x03\xe0\x00\x01\xf8\x00\x00\x00\x1e\x00\x00\x00\x0f\x80\x00\x00x\x00\x00\x00\x01\xe0\x00\x01\xc0\x00\x00\x00\x00p\x00\x07\x00\x00\x00\x00\x00\x1c\x00\x0c\x00\x00\x00\x00\x00\x06\x008\x00\x00\x00\x00\x00\x18\x00`\x00\x00\x00\x00\x000\x01\xc0\x00\x00\x00\x00\x00\xe0\x01\x80\x00\x00\x00\x00\x01\xc0\x03\x00\x00\x00\x00\x00\x03\x00\x06\x00\x00\x00\x00\x00\x06\x00\x0c\x00\x00\x00\x00\x00\x18\x00\x18\x00\x00\x00\x00\x000\x00\x18\x00\x00\x00\x00\x00`\x000\x00\x00\x00\x00\x01\x80\x00 \x00\x00\x00\x00\x03\x00\x00`\x00\x00\x00\x00\x0e\x00\x00`\x00\x00\x00\x00\x1c\x00\x00@\x00\x00\x00\x000\x00\x00\xc0\x00\x00\x1f\x80`\x00\x00\xc3\xff\xf0q\xc1\x80\x00\x00\x82\x000`c\x00\x00\x00\x82\x000\x80.\x00\x00\x00\x83\x000\x806\x00\x00\x00\x82\x000\xc0#\x00\x00\x00\xc2\x00 `a\xc0\x00\x00\xc2\x00 {\xc0`\x00\x00\xc2\x000\x1f\x008\x00\x00B\x003\xff\xfc\x0c\x00\x00b\x002\xcc\xcc\x07\x00\x00c\x002\x00\x0c\x01\x80\x00"\x00"\x00\x0c\x00\xe0\x002\x00"\x00\x0c\x00p\x00\x1a\x002\x00\x0c\x00\x1c\x00\x1a\x002\x00\x0c\x00\x0e\x00\x0e\x002\x00\x0c\x00\x03\x00\x06\x002\x00\x0c\x00\x01\xc0\x03\x002\x00\x0c\x00\x00`\x02\x00"\x00\x0c\x00\x008\x03\x00"\x00\x0c\x00\x00\x1c\x02\x002\x00\x0c\x00\x00\x07\x02\x002\x00\x0c\x00\x00\x0e\x02\x002\x00\x0c\x00\x008\x02\x003\xff\xfc\x00\x00\xe0\x02\x000\x00\x00\x00\x07\x80\x02\x00>\x00\x00\x00>\x00\x03\x00\'\xc0\x00\x01\xf0\x00\x02\x000\xff\xff\xff\x00\x00\x02\x000\x07\xff\xf0\x00\x00\x02\x008a\x8c\x00\x00\x00\x02\x00?\xff\xfc\x00\x00\x00\x02\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x0c\x00\x00\x00\x03\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x0c\x00\x00\x00\x03\xff\xff\xff\xfc\x00\x00\x00')
fb_pic = framebuf.FrameBuffer(pic, 32, 32, framebuf.MONO_HLSB)

fb_size = int(epd.width * epd.height / 8)
buf = bytearray(fb_size)

# framebuffer for landscape mode
fb = framebuf.FrameBuffer(buf, epd.height, epd.width, framebuf.MONO_VLSB)

black = 0  # black/red
white = 1  # white

# black frame
fb.fill(white)
fb.blit(fb_pic, 12, 12)
epd.send_frame_landscape(buf, None)

# red frame
fb.fill(white)
fb.blit(fb_pic, 48, 48)
epd.send_frame_landscape(None, buf)
epd.display_frame()

# power off
epd.sleep()